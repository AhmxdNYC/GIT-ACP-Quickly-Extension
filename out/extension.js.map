{"version":3,"file":"extension.js","mappings":"2BAAA,IAAMA,EAASC,EAAQ,KACjBC,EAAKD,EAAQ,KACbE,EAAKF,EAAQ,KACbG,EAAOH,EAAQ,KAEfI,EAAU,SA0ChB,SAASC,IACP,IAMMC,EANqB,CACzBC,OAAQ,SACRC,MAAO,UACPC,MAAO,iBAG6BR,EAAGS,YACnCC,EAAaR,EAAKS,KAAKX,EAAGY,UAAWP,GAE3C,OAAKJ,EAAGY,WAAWH,IAUnBI,QAAQC,IAAI,GAADC,OAAIX,EAAU,YAClBK,IAVLI,QAAQC,IAAI,GAADC,OACNX,EAAU,6DAEfJ,EAAGgB,cAAcP,EAAYQ,EAAkBf,IAC/CL,EAAOqB,OAAOC,uBAAuB,kCAADJ,OACAX,EAAU,kFAAAW,OAAkFN,EAAU,uBAEnIA,EAIX,CAEA,SAASW,EAAqBC,GAC5B,OAAIA,GAAuBrB,EAAGY,WAAWS,GA0B3C,SAA0BA,EAAqBC,GAC7C,IACE,IAAIC,EAAUvB,EAAGwB,aAAaH,EAAqB,QAE7CI,EAAuBF,EAAQG,MADhB,kCAMrB,IAJwBD,EACpBA,EAAqB,GACrB,UAEoBvB,EAAwB,CAC9C,IAAMyB,EAAiBV,EAAkBf,GAAS0B,OAE5CC,EAAY,sBAEdC,EAAaP,EAAQQ,QAHL,yBAIhBC,EAAWT,EAAQQ,QAAQF,EAAWC,IAEtB,IAAhBA,IAAmC,IAAdE,IACvBA,GAAYH,GAERC,EAAa,GAAiC,OAA5BP,EAAQO,EAAa,KACzCA,GAAc,GAEhBP,EACEA,EAAQU,UAAU,EAAGH,GACrBH,EACAJ,EAAQU,UAAUD,IAQtBhC,EAAGgB,cAAcK,EAAqBE,GACtC1B,EAAOqB,OAAOC,uBAAuB,kCAADJ,OACAb,EAAO,QAAAa,OAAOM,EAAmB,gCAAAN,OAAgCM,EAAmB,sBAE1H,MACER,QAAQC,IAAI,4CAEhB,CAAE,MAAOoB,GAKP,OAJArB,QAAQqB,MAAM,6CAA8CA,GAC5DrC,EAAOqB,OAAOiB,iBAAiB,8CAADpB,OACkBmB,EAAME,WAE/C,CACT,CACA,OAAO,CACT,CA1EWC,CAAiBhB,IAExBR,QAAQC,IACN,iDACAO,IAEK,EAEX,CAoEA,SAASJ,EAAkBqB,GACzB,MAAO,oEAAPvB,OAC+DuB,EAAO,8DAAAvB,OACrDuB,EAAO,87PA8N1B,CAIAC,EAAOC,QAAU,CACfC,SApXF,SAAkBC,GAChB7B,QAAQC,IACN,oEAGF,IAwEM6B,EACAC,EAzEAvB,EAAsBlB,IAC5B,GAAIkB,GAEF,GADmBD,EAAqBC,GAEtC,MAAO,6CAoELsB,EAAkB1B,EAAkBf,GACpC0C,EAAe,wHAAH7B,OAElB4B,EAAe,kFAGf9C,EAAOgD,UACJC,iBAAiB,CAAEvB,QAASqB,EAAcG,SAAU,aACpDC,MAAK,SAACC,GAAQ,OACbpD,EAAOqB,OAAOgC,iBAAiBD,EAAU,CAAEE,SAAS,GAAQ,IAEhEtC,QAAQC,IAAI,oDA3EVjB,EAAOqB,OAAOkC,mBACZ,4EAIJ,IAAIC,EAAaxD,EAAOyD,SAASC,gBAC/B,sCACA,WACE,IAAMlC,EAAsBlB,IACxBkB,EACiBD,EAAqBC,IAEtCxB,EAAOqB,OAAOC,uBACZ,yCAIJtB,EAAOqB,OAAOkC,mBACZ,oFAGN,IAGFV,EAAQc,cAAcC,KAAKJ,EAC7B,EA+UEK,WAJF,WAAuB,E,uBCxXvBnB,EAAOC,QAAU1C,QAAQ,S,uBCAzByC,EAAOC,QAAU1C,QAAQ,K,uBCAzByC,EAAOC,QAAU1C,QAAQ,K,uBCAzByC,EAAOC,QAAU1C,QAAQ,O,GCCrB6D,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAavB,QAGrB,IAAID,EAASoB,EAAyBG,GAAY,CAGjDtB,QAAS,CAAC,GAOX,OAHAyB,EAAoBH,GAAUvB,EAAQA,EAAOC,QAASqB,GAG/CtB,EAAOC,OACf,CCnB0BqB,CAAoB,K","sources":[".././extension.js","../external commonjs \"vscode\"","../external node-commonjs \"fs\"","../external node-commonjs \"os\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["const vscode = require(\"vscode\")\nconst os = require(\"os\")\nconst fs = require(\"fs\")\nconst path = require(\"path\")\n\nconst VERSION = \"0.7.10\"\n\nfunction activate(context) {\n  console.log(\n    'Congratulations, your extension \"ACP-GIT-COMMAND\" is now ACTIVE!'\n  )\n\n  const shellConfigFilePath = getShellConfigFilePath()\n  if (shellConfigFilePath) {\n    const wasUpdated = autoUpdateAcpCommand(shellConfigFilePath)\n    if (wasUpdated) {\n      return `ACP command was successfully updated.`\n    }\n  } else {\n    createInstructionFile()\n    vscode.window.showWarningMessage(\n      \"No shell configuration file found. Instructions file created on desktop.\"\n    )\n  }\n\n  let disposable = vscode.commands.registerCommand(\n    \"acp-git-commands.installACPCommand\",\n    function () {\n      const shellConfigFilePath = getShellConfigFilePath()\n      if (shellConfigFilePath) {\n        const wasUpdated = autoUpdateAcpCommand(shellConfigFilePath)\n        if (wasUpdated) {\n          vscode.window.showInformationMessage(\n            \"ACP command was successfully updated.\"\n          )\n        }\n      } else {\n        vscode.window.showWarningMessage(\n          \"No shell configuration file found. Please check the instructions on your desktop.\"\n        )\n      }\n    }\n  )\n\n  context.subscriptions.push(disposable)\n}\n\nfunction getShellConfigFilePath() {\n  const defaultConfigFiles = {\n    darwin: \".zshrc\",\n    linux: \".bashrc\",\n    win32: \".bash_profile\",\n  }\n\n  const configFile = defaultConfigFiles[os.platform()]\n  const configPath = path.join(os.homedir(), configFile)\n\n  if (!fs.existsSync(configPath)) {\n    console.log(\n      `${configFile} not found. Creating and initializing with ACP function.`\n    )\n    fs.writeFileSync(configPath, getNewAcpFunction(VERSION)) // Make sure to use the current version\n    vscode.window.showInformationMessage(\n      `A new shell configuration file ${configFile} was created and initialized with the ACP function. To check it out run \\`code ${configPath}\\` in the terminal.`\n    )\n    return configPath\n  }\n  console.log(`${configFile} found.`)\n  return configPath\n}\n\nfunction autoUpdateAcpCommand(shellConfigFilePath) {\n  if (shellConfigFilePath && fs.existsSync(shellConfigFilePath)) {\n    return updateAcpCommand(shellConfigFilePath, false)\n  } else {\n    console.log(\n      \"Unable to find shell config file for updating:\",\n      shellConfigFilePath\n    )\n    return false\n  }\n}\n\nfunction createInstructionFile() {\n  const acpFunctionCode = getNewAcpFunction(VERSION) // Ensure this matches the current version\n  const instructions = `\nPlease manually add the following script to your shell configuration file (e.g., .bashrc, .bash_profile, .zshrc):\n${acpFunctionCode}\nSave the file and source it to apply the changes, e.g., \\`source ~/.bashrc\\`\n`\n  vscode.workspace\n    .openTextDocument({ content: instructions, language: \"markdown\" })\n    .then((document) =>\n      vscode.window.showTextDocument(document, { preview: false })\n    )\n  console.log(\"Instructions opened in a new VS Code editor tab.\")\n}\n\nfunction updateAcpCommand(shellConfigFilePath, forceUpdate) {\n  try {\n    let content = fs.readFileSync(shellConfigFilePath, \"utf8\")\n    const versionRegex = /# ACP Version: (\\d+\\.\\d+\\.\\d+)/\n    const existingVersionMatch = content.match(versionRegex)\n    const existingVersion = existingVersionMatch\n      ? existingVersionMatch[1]\n      : \"none\"\n\n    if (existingVersion !== VERSION || forceUpdate) {\n      const newAcpFunction = getNewAcpFunction(VERSION).trim() // Trim to remove any leading/trailing newlines from the function string\n      const startMarker = \"# BEGIN: ACP Function\"\n      const endMarker = \"# END: ACP Function\"\n\n      let startIndex = content.indexOf(startMarker)\n      let endIndex = content.indexOf(endMarker, startIndex)\n\n      if (startIndex !== -1 && endIndex !== -1) {\n        endIndex += endMarker.length // Include the end marker in the replacement\n        // Ensure we handle the newline character before the start of the block if it exists\n        if (startIndex > 0 && content[startIndex - 1] === \"\\n\") {\n          startIndex -= 1\n        }\n        content =\n          content.substring(0, startIndex) +\n          newAcpFunction +\n          content.substring(endIndex)\n      } else {\n        // Append the new ACP function at the end if not found (only if force update)\n        if (forceUpdate) {\n          content = content.trim() + \"\\n\" + newAcpFunction // Trim and ensure only one newline before the new function\n        }\n      }\n\n      fs.writeFileSync(shellConfigFilePath, content)\n      vscode.window.showInformationMessage(\n        `ACP command updated to version ${VERSION} in ${shellConfigFilePath} .To check it out run \\`code ${shellConfigFilePath}\\` in the terminal.`\n      )\n    } else {\n      console.log(\"No update needed or force update not set.\")\n    }\n  } catch (error) {\n    console.error(\"Error occurred while updating ACP command:\", error)\n    vscode.window.showErrorMessage(\n      `Error occurred while updating ACP command: ${error.message}`\n    )\n    return false // Indicate failure\n  }\n  return true // Indicate success\n}\n\nfunction getNewAcpFunction(version) {\n  return `\n  # BEGIN: ACP Function - Git Add, Commit, Push - ACP Version: ${version} - DO NOT MODIFY THIS BLOCK MANUALLY # \n  # ACP Version: ${version}\n  function acp() {\n    echo -e \"Checking repository status...\"\n  \n    # Check if inside a git repository\n    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then\n      echo -e \"\\\\n\\\\x1b[31mError: Not inside a Git repository.\\\\x1b[0m\\\\n\"\n      echo \"Please navigate to a directory that is part of a Git repository or initialize one with \\\\x1b[33m'git init'\\\\x1b[0m.\\\\n\"\n      return\n    fi\n  \n    # Check if in a detached head state\n    if ! git symbolic-ref --quiet --short HEAD; then\n      echo -e \"\\\\n\\\\x1b[31mError: Repository is in a detached head state.\\\\x1b[0m\"\n      echo \"Please check out a branch to make your changes permanent.\"\n      return\n    fi\n    \n    # Fetch the latest changes from the remote\n  \n    git fetch origin\n    local current_branch=$(git rev-parse --abbrev-ref HEAD)\n    \n    # Check if the current branch has an upstream set\n  \n    if ! git rev-parse --abbrev-ref --symbolic-full-name @{u} >/dev/null 2>&1; then\n    echo -e \"\\n\\x1b[31mError: No upstream set for the current branch '$current_branch'.\\x1b[0m\"\n    echo -e \"\\\\nTo push and set the remote as upstream, use:\"\n    echo -e \"\\\\n\\\\x1b[33m'git push --set-upstream origin $current_branch'\\\\x1b[0m\\\\n\"\n      return\n    fi\n  \n    # Check if the local branch is behind, ahead, or diverged from the remote branch\n  \n    local local_commit=$(git rev-parse @)\n    local remote_commit=$(git rev-parse @{u})\n    local base_commit=$(git merge-base @ @{u})\n  \n    if [ \"$local_commit\" = \"$remote_commit\" ]; then\n      echo \"Up-to-date with remote. No pull needed.\"\n    elif [ \"$local_commit\" = \"$base_commit\" ]; then\n      echo -e \"\\\\n\\\\x1b[31mYour local branch is behind the remote branch.\\\\x1b[0m\\\\n\"\n      echo -e \"Pull required before push. Please run: \\\\x1b[33m'git pull'\\\\x1b[0m.\\\\n\"\n      return\n    elif [ \"$remote_commit\" = \"$base_commit\" ]; then\n      echo \"Local commits can be pushed.\"\n    else\n      echo -e \"\\\\n\\\\x1b[33mDiverged from remote. Manual merge required & manual Git commands.\\\\x1b[0m\\\\n\"\n      echo -e \"Please run: \\\\x1b[33m'git pull'\\\\x1b[0m & \\\\x1b[33m'git status'\\\\x1b[0m to see conflicts and resolve them manually.\\\\n\"\n      return\n    fi\n  \n    # Add all changes, commit, and push to the remote\n  \n    echo -e \"Adding \\\\x1b[36mall\\\\x1b[0m changes...\"\n    git add -A\n  \n    if [ $# -eq 0 ]; then\n      echo -e \"\\\\n\\\\x1b[31mError: No commit message provided.\\\\x1b[0m\\\\n\"\n      return 1\n    fi\n  \n    commit_message=\"$*\"\n    echo -e \"Committing \\\\x1b[36mwith\\\\x1b[0m message: '$commit_message'\"\n    git commit -m \"$commit_message\"\n    if [[ $? -eq 0 ]]; then\n      echo \"Successfully committed. Pushing \\\\x1b[36mto\\\\x1b[0m remote...\"\n      git push\n      if [[ $? -eq 0 ]]; then\n        echo -e \"\\\\n\\\\x1b[36mCommit Message:\\\\x1b[0m $commit_message\\\\n\"\n        echo -e \"\\\\x1b[32m----> Push Successful <----\\\\x1b[0m\\\\n\"\n      else\n        echo -e \"\\\\n\\\\x1b[31m----> Push FAILED <----\\\\x1b[0m\\\\n\"\n      fi\n    else\n      echo -e \"\\\\n\\\\x1b[31m----> Commit FAILED <----\\\\x1b[0m\\\\n\"\n    fi\n  }\n  \n  function acm() {\n    # Check if inside a Git repository\n    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then\n      echo -e \"\\\\n\\x1b[31mError: Not inside a Git repository.\\\\x1b[0m\\\\n\"\n      return\n    fi\n  \n    echo -e \"Preparing \\\\x1b[36mto\\\\x1b[0m add \\\\x1b[36mall\\\\x1b[0m changes and commit...\"\n  \n    # First, check if a commit message was provided\n    if [ \"$#\" -eq 0 ]; then\n      echo -e \"\\\\n\\x1b[31mError: No commit message provided.\\\\x1b[0m\\\\n\"\n      return 1\n    fi\n  \n    local commit_message=\"$*\"\n  \n  \n    # Check if the HEAD is detached or the branch is valid\n    local current_branch=$(git symbolic-ref --quiet --short HEAD)\n    if [ -z \"$current_branch\" ]; then\n      echo -e \"\\\\n\\x1b[31mError: Repository is in a detached head state or the branch is not valid.\\\\x1b[0m\"\n      echo \"Please check out a branch to make your changes permanent.\\\\n\"\n      return\n    fi\n  \n    # Add all changes\n    git add -A\n    echo -e \"\\\\x1b[36mAll\\\\x1b[0m changes added.\"\n  \n    # Commit changes\n    echo -e \"Committing with message: $commit_message\"\n    git commit -m \"$commit_message\"\n    if [[ $? -eq 0 ]]; then\n      echo -e \"\\\\n\\\\x1b[36mCommit Message:\\\\x1b[0m $commit_message\\\\n\"\n      echo -e \"\\\\x1b[32m----> Commit Successful <----\\\\x1b[0m\\\\n\"\n    else\n      echo -e \"\\\\n\\x1b[31m----> Commit FAILED <----\\\\x1b[0m\\\\n\"\n    fi\n  }\n  \n  function add() {\n  \n    # First, check if inside a Git repository\n    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then\n    echo -e \"\\\\n\\x1b[31mError: Not inside a Git repository.\\\\x1b[0m\\\\n\"\n    return\n    fi\n  \n    echo -e \"\\\\nPreparing \\\\x1b[36mto\\\\x1b[0m add changes.\"\n  \n    # Check if the HEAD is detached or the branch is valid\n    local current_branch=$(git symbolic-ref --quiet --short HEAD)\n    if [ -z \"$current_branch\" ]; then\n        echo -e \"\\\\n\\x1b[31mError: Repository is in a detached head state or the branch is not valid.\\\\x1b[0m\"\n        echo \"Please check out a branch to make your changes permanent.\\\\n\"\n        return\n    fi\n  \n    # Determine what to add based on the argument provided\n    if [ \"$#\" -eq 0 ]; then\n        echo \"No specific files provided. Adding \\\\x1b[36mall\\\\x1b[0m changes...\\\\n\"\n        git add -A\n    else\n        echo \"Adding specified files...\\\\n\"\n        git add \"$@\"\n    fi\n  \n    # Confirm what has been staged\n    git status --short\n    echo -e \"\\\\n\\x1b[32mFiles have been staged. Use \\\\x1b[33m'cm <message>'\\\\x1b[0m to commit these changes.\\\\x1b[0m\\\\n\"\n    echo -e \"\\\\n\\x1b[32mGreen = Ready for commit\\\\x1b[0m, \\\\x1b[31mRed = Not staged for commit\\\\x1b[0m\\\\n\"\n  }\n  \n  function cm () {\n    # First, check if inside a Git repository\n    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then\n    echo -e \"\\\\n\\x1b[31mError: Not inside a Git repository.\\\\x1b[0m\\\\n\"\n    return\n    fi\n  \n    # Check if a commit message was provided\n    if [ \"$#\" -eq 0 ]; then\n    echo -e \"\\\\n\\x1b[31mError: No commit message provided.\\\\x1b[0m\\\\n\"\n    return\n    fi\n  \n    local commit_message=\"$*\"\n  \n    # Check if the HEAD is detached or the branch is valid\n    local current_branch=$(git symbolic-ref --quiet --short HEAD)\n    if [ -z \"$current_branch\" ]; then\n    echo -e \"\\\\n\\x1b[31mError: Repository is in a detached head state or the branch is not valid.\\\\x1b[0m\"\n    echo \"Please check out a branch to make your changes permanent.\\\\n\"\n    return\n    fi\n  \n    # Commit changes\n    echo -e \"Committing with message: $commit_message\"\n    git commit -m \"$commit_message\"\n    if [[ $? -eq 0 ]]; then\n    echo -e \"\\\\n\\x1b[36mCommit Message:\\\\x1b[0m $commit_message\\\\n\"\n    echo -e \"\\\\x1b[32m----> Commit Successful <----\\\\x1b[0m\\\\n\"\n    else\n    echo -e \"\\\\n\\x1b[31m----> Commit FAILED <----\\\\x1b[0m\\\\n\"\n    fi\n  }\n  \n  function cm() {\n    # First, check if inside a Git repository\n    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then\n      echo -e \"\\\\n\\x1b[31mError: Not inside a Git repository.\\\\x1b[0m\\\\n\"\n      return\n    fi\n  \n    # Check if a commit message was provided\n    if [ \"$#\" -eq 0 ]; then\n      echo -e \"\\\\n\\x1b[31mError: No commit message provided.\\\\x1b[0m\\\\n\"\n      return 1\n    fi\n  \n    local commit_message=\"$*\"\n  \n    # Check if the HEAD is detached or the branch is valid\n    local current_branch=$(git symbolic-ref --quiet --short HEAD)\n    if [ -z \"$current_branch\" ]; then\n      echo -e \"\\\\n\\x1b[31mError: Repository is in a detached head state or the branch is not valid.\\\\x1b[0m\"\n      echo \"Please check out a branch to make your changes permanent.\\\\n\"\n      return\n    fi\n  \n    # Commit changes\n    echo -e \"Committing with message: $commit_message\"\n    git commit -m \"$commit_message\"\n    if [[ $? -eq 0 ]]; then\n      echo -e \"\\\\n\\x1b[36mCommit Message:\\\\x1b[0m $commit_message\\\\n\"\n      echo -e \"\\\\x1b[32m----> Commit Successful <----\\\\x1b[0m\\\\n\"\n    else\n      echo -e \"\\\\n\\x1b[31m----> Commit FAILED <----\\\\x1b[0m\\\\n\"\n    fi\n  }\n  # END: ACP Function \n  `\n}\n\nfunction deactivate() {}\n\nmodule.exports = {\n  activate,\n  deactivate,\n}\n\n// two version of extension\n// quickly : acp-git-commands\n// enhanced : git-acp-enhanced\n// {\n//   \"name\": \"acp-git-commands\",\n//   \"displayName\": \"Git ACP Quickly Add, Commit & Push\",\n//   \"publisher\": \"AhmadNYC\",\n\n// Git ACP Enhanced: Add, Commit, Push   // second display name\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(286);\n"],"names":["vscode","require","os","fs","path","VERSION","getShellConfigFilePath","configFile","darwin","linux","win32","platform","configPath","join","homedir","existsSync","console","log","concat","writeFileSync","getNewAcpFunction","window","showInformationMessage","autoUpdateAcpCommand","shellConfigFilePath","forceUpdate","content","readFileSync","existingVersionMatch","match","newAcpFunction","trim","endMarker","startIndex","indexOf","endIndex","substring","error","showErrorMessage","message","updateAcpCommand","version","module","exports","activate","context","acpFunctionCode","instructions","workspace","openTextDocument","language","then","document","showTextDocument","preview","showWarningMessage","disposable","commands","registerCommand","subscriptions","push","deactivate","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}