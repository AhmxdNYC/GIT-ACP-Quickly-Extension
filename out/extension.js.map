{"version":3,"file":"extension.js","mappings":"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","sources":[".././extension.js","../external commonjs \"vscode\"","../external node-commonjs \"child_process\"","../external node-commonjs \"fs\"","../external node-commonjs \"os\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["const vscode = require(\"vscode\")\nconst os = require(\"os\")\nconst fs = require(\"fs\")\nconst path = require(\"path\")\n\nconst VERSION = \"0.9.0\"\n\nfunction activate(context) {\n  console.log(\n    'Congratulations, your extension \"ACP-GIT-COMMAND\" is now ACTIVE!'\n  )\n  let gitStatusIndicator = vscode.window.createStatusBarItem(\n    vscode.StatusBarAlignment.Left,\n    100\n  )\n  gitStatusIndicator.text = `$(sync~spin) Initializing...`\n  gitStatusIndicator.show()\n  context.subscriptions.push(gitStatusIndicator)\n  const acpCommandDisposable = vscode.commands.registerCommand(\n    \"extension.acpCommand\",\n    openTerminalAndRunAcp\n  )\n  updateGitStatus(gitStatusIndicator) // Initial update\n  const gitWatcher = vscode.workspace.createFileSystemWatcher(\n    \"**/.git/{HEAD,refs/heads/*,refs/remotes/*,index}\"\n  )\n  gitWatcher.onDidChange(() => updateGitStatus(gitStatusIndicator))\n  context.subscriptions.push(gitWatcher)\n  setupFetchInterval(gitStatusIndicator, context) // Periodic updates\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\"acp-git-commands.installACPCommand\", () =>\n      updateGitStatus(gitStatusIndicator)\n    ),\n    vscode.window.onDidChangeActiveTextEditor(() =>\n      updateGitStatus(gitStatusIndicator)\n    ),\n    vscode.window.onDidChangeWindowState((state) => {\n      if (state.focused) updateGitStatus(gitStatusIndicator)\n    })\n  )\n  const shellConfigFilePath = getShellConfigFilePath()\n  if (shellConfigFilePath) {\n    const wasUpdated = autoUpdateAcpCommand(shellConfigFilePath)\n    if (wasUpdated) {\n      return `ACP command was successfully updated.`\n    }\n  } else {\n    createInstructionFile()\n    vscode.window.showWarningMessage(\n      \"No shell configuration file found. Instructions file created on desktop.\"\n    )\n  }\n\n  let disposable = vscode.commands.registerCommand(\n    \"acp-git-commands.installACPCommand\",\n    function () {\n      const shellConfigFilePath = getShellConfigFilePath()\n      if (shellConfigFilePath) {\n        const wasUpdated = autoUpdateAcpCommand(shellConfigFilePath)\n        if (wasUpdated) {\n          vscode.window.showInformationMessage(\n            \"ACP command was successfully updated.\"\n          )\n        }\n      } else {\n        vscode.window.showWarningMessage(\n          \"No shell configuration file found. Please check the instructions on your desktop.\"\n        )\n      }\n      updateGitStatus(gitStatusIndicator)\n    }\n  )\n\n  context.subscriptions.push(disposable)\n  context.subscriptions.push(\n    vscode.window.onDidChangeActiveTextEditor(() => {\n      updateGitStatus(gitStatusIndicator)\n    })\n  )\n  console.log(\"acp run command before push\")\n\n  context.subscriptions.push(acpCommandDisposable)\n  console.log(\"acp run command pushed\")\n}\n\nfunction openTerminalAndRunAcp() {\n  console.log(\"Preparing to send 'acp' command...\")\n\n  // Check if there is an active terminal\n  let currentTerminal = vscode.window.activeTerminal\n\n  if (!currentTerminal) {\n    // If no active terminal, create a new one with the name of the current workspace\n    const workspaceName = vscode.workspace.name || \"Default Workspace\"\n    currentTerminal = vscode.window.createTerminal({ name: workspaceName })\n  }\n\n  // Show the terminal window\n  currentTerminal.show()\n\n  // Delay the sendText to allow the terminal to initialize properly if it was newly created\n  setTimeout(() => {\n    currentTerminal.sendText(\"acp \", false) // This places 'acp' in the command line without executing it\n  }, 230) // Adjust the delay as needed based on your environment\n}\n\nfunction setupFetchInterval(gitStatusIndicator, context) {\n  const fetchInterval = 300000 // 5 minutes\n  const intervalId = setInterval(\n    () => updateGitStatus(gitStatusIndicator),\n    fetchInterval\n  )\n\n  // Create a disposable from the intervalId and add it to the context.subscriptions array\n  const disposable = {\n    dispose: () => clearInterval(intervalId),\n  }\n\n  if (context.subscriptions) {\n    context.subscriptions.push(disposable)\n  } else {\n    console.error(\"context.subscriptions is undefined\")\n  }\n}\n\nfunction updateGitStatus(gitStatusIndicator) {\n  const repoPath =\n    vscode.workspace.rootPath ||\n    vscode.workspace.workspaceFolders?.[0].uri.fsPath\n  if (!repoPath || !fs.existsSync(path.join(repoPath, \".git\"))) {\n    gitStatusIndicator.text = `$(issue-opened) No Repo`\n    gitStatusIndicator.show()\n    return\n  }\n\n  require(\"child_process\").exec(\n    \"git fetch && git status -sb\",\n    { cwd: repoPath },\n    (err, stdout) => {\n      if (err) {\n        gitStatusIndicator.text = `$(alert) Failed to fetch Git status`\n        console.error(\"Error fetching Git status:\", err)\n      } else {\n        parseGitStatus(stdout, gitStatusIndicator)\n      }\n    }\n  )\n}\nfunction parseGitStatus(stdout, gitStatusIndicator) {\n  const status = stdout.trim()\n  console.log(\"Git status output:\", status) // Log output for debugging\n\n  // Diverged check: often involves both 'ahead' and 'behind' text in the output\n  if (\n    status.includes(\"diverged\") ||\n    (status.includes(\"ahead\") && status.includes(\"behind\"))\n  ) {\n    gitStatusIndicator.text = `$(git-merge) Diverged`\n    gitStatusIndicator.color = \"#ff6348\" // Tomato color for diverged status\n    gitStatusIndicator.tooltip =\n      \"Your branch has diverged from the remote branch. Click for details.\"\n  }\n  // Specific checks for ahead or behind without being diverged\n  else if (status.includes(\"[ahead\") && !status.includes(\"behind\")) {\n    gitStatusIndicator.text = `$(arrow-up) Ahead`\n    gitStatusIndicator.color = \"#ffa502\" // Orange color for ahead status\n    gitStatusIndicator.tooltip =\n      \"Your branch is ahead of the remote branch. Click to push changes.\"\n  } else if (status.includes(\"[behind\") && !status.includes(\"ahead\")) {\n    gitStatusIndicator.text = `$(arrow-down) Behind`\n    gitStatusIndicator.color = \"#ff4757\" // Red color for behind status\n    gitStatusIndicator.tooltip =\n      \"Your branch is behind the remote branch. Click to pull changes.\"\n  } else {\n    gitStatusIndicator.text = `$(check) Up-to-date`\n    gitStatusIndicator.color = \"#2ed573\" // Green color for up-to-date status\n    gitStatusIndicator.tooltip =\n      \"Your branch is up-to-date with the remote branch.\"\n  }\n}\n\nfunction getShellConfigFilePath() {\n  const shell = process.env.SHELL || \"/bin/bash\"\n  const shellName = path.basename(shell)\n  let configFile\n\n  switch (shellName) {\n    case \"bash\":\n      configFile = \".bash_profile\"\n      break\n    case \"zsh\":\n      configFile = \".zshrc\"\n      break\n    default:\n      console.log(`Unsupported shell: ${shellName}`)\n      return\n  }\n\n  const configPath = path.join(os.homedir(), configFile)\n\n  if (!fs.existsSync(configPath)) {\n    console.log(\n      `${configFile} not found. Creating and initializing with ACP function.`\n    )\n    fs.writeFileSync(configPath, getNewAcpFunction(VERSION)) // Make sure to use the current version\n    vscode.window.showInformationMessage(\n      `${configFile} created and initialized with ACP function. To check it out run \\`code ${configPath}\\` in the terminal.`\n    )\n  }\n\n  return configPath\n}\n\nfunction autoUpdateAcpCommand(shellConfigFilePath) {\n  if (shellConfigFilePath && fs.existsSync(shellConfigFilePath)) {\n    return updateAcpCommand(shellConfigFilePath, false)\n  } else {\n    console.log(\n      \"Unable to find shell config file for updating:\",\n      shellConfigFilePath\n    )\n    return false\n  }\n}\n\nfunction createInstructionFile() {\n  const acpFunctionCode = getNewAcpFunction(VERSION) // Ensure this matches the current version\n  const instructions = `\nPlease manually add the following script to your shell configuration file (e.g., .bashrc, .bash_profile, .zshrc):\n${acpFunctionCode}\nSave the file and source it to apply the changes, e.g., \\`source ~/.bashrc\\`\n`\n  vscode.workspace\n    .openTextDocument({ content: instructions, language: \"markdown\" })\n    .then((document) =>\n      vscode.window.showTextDocument(document, { preview: false })\n    )\n  console.log(\"Instructions opened in a new VS Code editor tab.\")\n}\n\nfunction updateAcpCommand(shellConfigFilePath, forceUpdate) {\n  try {\n    let content = fs.readFileSync(shellConfigFilePath, \"utf8\")\n    const versionRegex = /# ACP Version: (\\d+\\.\\d+\\.\\d+)/\n    const existingVersionMatch = content.match(versionRegex)\n    const existingVersion = existingVersionMatch\n      ? existingVersionMatch[1]\n      : \"none\"\n\n    const newAcpFunction = getNewAcpFunction(VERSION).trim() + \"\\n\" // Ensure there is exactly one newline after the block\n\n    if (existingVersion !== VERSION || forceUpdate) {\n      const startMarker = \"# BEGIN: ACP Function\"\n      const endMarker = \"# END: ACP Function\"\n      let startIndex = content.indexOf(startMarker)\n      let endIndex = content.indexOf(endMarker, startIndex)\n\n      if (startIndex !== -1 && endIndex !== -1) {\n        endIndex += endMarker.length\n        // Managing newlines around the ACP block to avoid additional spaces\n        while (content[startIndex - 1] === \"\\n\" && startIndex > 0) {\n          startIndex-- // Move back to remove extra newlines\n        }\n        if (content[endIndex] === \"\\n\") {\n          endIndex++ // Move forward to remove the newline following the end marker\n        }\n        content =\n          content.substring(0, startIndex) +\n          newAcpFunction +\n          content.substring(endIndex)\n      } else {\n        // Ensure no multiple newlines at the end before appending\n        content = content.trim() + \"\\n\" + newAcpFunction\n      }\n\n      fs.writeFileSync(shellConfigFilePath, content)\n      // vscode.window.showInformationMessage(\n      //   `ACP command updated to version ${VERSION} in ${shellConfigFilePath}. To check it out run \\`code ${shellConfigFilePath}\\` in the terminal.`\n      // )\n      const activeTerminal = vscode.window.activeTerminal\n      if (activeTerminal) {\n        const terminalName = activeTerminal.name\n        activeTerminal.dispose()\n        const newTerminal = vscode.window.createTerminal({ name: terminalName })\n        newTerminal.show()\n      }\n    } else {\n      console.log(\"No update needed or force update not set.\")\n    }\n  } catch (error) {\n    console.error(\"Error occurred while updating ACP command:\", error)\n    vscode.window.showErrorMessage(\n      `Error occurred while updating ACP command: ${error.message}`\n    )\n    return false // Indicate failure\n  }\n  return true // Indicate success\n}\n\nfunction getNewAcpFunction(version) {\n  return `\n    # BEGIN: ACP Function - Git Add, Commit, Push - ACP Version: ${version} - DO NOT MODIFY THIS BLOCK MANUALLY # \n    # ACP Version: ${version}\n    function acp() {\n      echo -e \"Checking repository status...\"\n    \n      # Check if inside a git repository\n      if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then\n        echo -e \"\\\\n\\\\x1b[31mError: Not inside a Git repository.\\\\x1b[0m\\\\n\"\n        echo \"Please navigate to a directory that is part of a Git repository or initialize one with \\\\x1b[33m'git init'\\\\x1b[0m.\\\\n\"\n        return\n      fi\n    \n      # Check if in a detached head state\n      if ! git symbolic-ref --quiet --short HEAD; then\n        echo -e \"\\\\n\\\\x1b[31mError: Repository is in a detached head state.\\\\x1b[0m\"\n        echo \"Please check out a branch to make your changes permanent.\"\n        return\n      fi\n      \n      # Fetch the latest changes from the remote\n    \n      git fetch origin\n      local current_branch=$(git rev-parse --abbrev-ref HEAD)\n      \n      # Check if the current branch has an upstream set\n    \n      if ! git rev-parse --abbrev-ref --symbolic-full-name @{u} >/dev/null 2>&1; then\n      echo -e \"\\n\\x1b[31mError: No upstream set for the current branch '$current_branch'.\\x1b[0m\"\n      echo -e \"\\\\nTo push and set the remote as upstream, use:\"\n      echo -e \"\\\\n\\\\x1b[33m'git push --set-upstream origin $current_branch'\\\\x1b[0m\\\\n\"\n        return\n      fi\n    \n      # Check if the local branch is behind, ahead, or diverged from the remote branch\n    \n      local local_commit=$(git rev-parse @)\n      local remote_commit=$(git rev-parse @{u})\n      local base_commit=$(git merge-base @ @{u})\n    \n      if [ \"$local_commit\" = \"$remote_commit\" ]; then\n        echo \"Up-to-date with remote. No pull needed.\"\n      elif [ \"$local_commit\" = \"$base_commit\" ]; then\n        echo -e \"\\\\n\\\\x1b[31mYour local branch is behind the remote branch.\\\\x1b[0m\\\\n\"\n        echo -e \"Pull required before push. Please run: \\\\x1b[33m'git pull'\\\\x1b[0m.\\\\n\"\n        return\n      elif [ \"$remote_commit\" = \"$base_commit\" ]; then\n        echo \"Local commits can be pushed.\"\n      else\n        echo -e \"\\\\n\\\\x1b[33mDiverged from remote. Manual merge required & manual Git commands.\\\\x1b[0m\\\\n\"\n        echo -e \"Please run: \\\\x1b[33m'git pull'\\\\x1b[0m & \\\\x1b[33m'git status'\\\\x1b[0m to see conflicts and resolve them manually.\\\\n\"\n        return\n      fi\n    \n      # Add all changes, commit, and push to the remote\n    \n      echo -e \"Adding \\\\x1b[36mall\\\\x1b[0m changes...\"\n      git add -A\n    \n      if [ $# -eq 0 ]; then\n        echo -e \"\\\\n\\\\x1b[31mError: No commit message provided.\\\\x1b[0m\\\\n\"\n        return 1\n      fi\n    \n      commit_message=\"$*\"\n      echo -e \"Committing \\\\x1b[36mwith\\\\x1b[0m message: '$commit_message'\"\n      git commit -m \"$commit_message\"\n      if [[ $? -eq 0 ]]; then\n        echo \"Successfully committed. Pushing \\\\x1b[36mto\\\\x1b[0m remote...\"\n        git push\n        if [[ $? -eq 0 ]]; then\n          echo -e \"\\\\n\\\\x1b[36mCommit Message:\\\\x1b[0m $commit_message\\\\n\"\n          echo -e \"\\\\x1b[32m----> Push Successful <----\\\\x1b[0m\\\\n\"\n        else\n          echo -e \"\\\\n\\\\x1b[31m----> Push FAILED <----\\\\x1b[0m\\\\n\"\n        fi\n      else\n        echo -e \"\\\\n\\\\x1b[31m----> Commit FAILED <----\\\\x1b[0m\\\\n\"\n      fi\n    }\n    \n    function acm() {\n      # Check if inside a Git repository\n      if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then\n        echo -e \"\\\\n\\x1b[31mError: Not inside a Git repository.\\\\x1b[0m\\\\n\"\n        return\n      fi\n    \n      echo -e \"Preparing \\\\x1b[36mto\\\\x1b[0m add \\\\x1b[36mall\\\\x1b[0m changes and commit...\"\n    \n      # First, check if a commit message was provided\n      if [ \"$#\" -eq 0 ]; then\n        echo -e \"\\\\n\\x1b[31mError: No commit message provided.\\\\x1b[0m\\\\n\"\n        return 1\n      fi\n    \n      local commit_message=\"$*\"\n    \n    \n      # Check if the HEAD is detached or the branch is valid\n      local current_branch=$(git symbolic-ref --quiet --short HEAD)\n      if [ -z \"$current_branch\" ]; then\n        echo -e \"\\\\n\\x1b[31mError: Repository is in a detached head state or the branch is not valid.\\\\x1b[0m\"\n        echo \"Please check out a branch to make your changes permanent.\\\\n\"\n        return\n      fi\n    \n      # Add all changes\n      git add -A\n      echo -e \"\\\\x1b[36mAll\\\\x1b[0m changes added.\"\n    \n      # Commit changes\n      echo -e \"Committing with message: $commit_message\"\n      git commit -m \"$commit_message\"\n      if [[ $? -eq 0 ]]; then\n        echo -e \"\\\\n\\\\x1b[36mCommit Message:\\\\x1b[0m $commit_message\\\\n\"\n        echo -e \"\\\\x1b[32m----> Commit Successful <----\\\\x1b[0m\\\\n\"\n      else\n        echo -e \"\\\\n\\x1b[31m----> Commit FAILED <----\\\\x1b[0m\\\\n\"\n      fi\n    }\n    \n    function add() {\n    \n      # First, check if inside a Git repository\n      if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then\n      echo -e \"\\\\n\\x1b[31mError: Not inside a Git repository.\\\\x1b[0m\\\\n\"\n      return\n      fi\n    \n      echo -e \"\\\\nPreparing \\\\x1b[36mto\\\\x1b[0m add changes.\"\n    \n      # Check if the HEAD is detached or the branch is valid\n      local current_branch=$(git symbolic-ref --quiet --short HEAD)\n      if [ -z \"$current_branch\" ]; then\n          echo -e \"\\\\n\\x1b[31mError: Repository is in a detached head state or the branch is not valid.\\\\x1b[0m\"\n          echo \"Please check out a branch to make your changes permanent.\\\\n\"\n          return\n      fi\n    \n      # Determine what to add based on the argument provided\n      if [ \"$#\" -eq 0 ]; then\n          echo \"No specific files provided. Adding \\\\x1b[36mall\\\\x1b[0m changes...\\\\n\"\n          git add -A\n      else\n          echo \"Adding specified files...\\\\n\"\n          git add \"$@\"\n      fi\n    \n      # Confirm what has been staged\n      git status --short\n      echo -e \"\\\\n\\x1b[32mFiles have been staged. Use \\\\x1b[33m'cm <message>'\\\\x1b[0m to commit these changes.\\\\x1b[0m\\\\n\"\n      echo -e \"\\\\n\\x1b[32mGreen = Ready for commit\\\\x1b[0m, \\\\x1b[31mRed = Not staged for commit\\\\x1b[0m\\\\n\"\n    }\n    \n    function cm () {\n      # First, check if inside a Git repository\n      if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then\n      echo -e \"\\\\n\\x1b[31mError: Not inside a Git repository.\\\\x1b[0m\\\\n\"\n      return\n      fi\n    \n      # Check if a commit message was provided\n      if [ \"$#\" -eq 0 ]; then\n      echo -e \"\\\\n\\x1b[31mError: No commit message provided.\\\\x1b[0m\\\\n\"\n      return\n      fi\n    \n      local commit_message=\"$*\"\n    \n      # Check if the HEAD is detached or the branch is valid\n      local current_branch=$(git symbolic-ref --quiet --short HEAD)\n      if [ -z \"$current_branch\" ]; then\n      echo -e \"\\\\n\\x1b[31mError: Repository is in a detached head state or the branch is not valid.\\\\x1b[0m\"\n      echo \"Please check out a branch to make your changes permanent.\\\\n\"\n      return\n      fi\n    \n      # Commit changes\n      echo -e \"Committing with message: $commit_message\"\n      git commit -m \"$commit_message\"\n      if [[ $? -eq 0 ]]; then\n      echo -e \"\\\\n\\x1b[36mCommit Message:\\\\x1b[0m $commit_message\\\\n\"\n      echo -e \"\\\\x1b[32m----> Commit Successful <----\\\\x1b[0m\\\\n\"\n      else\n      echo -e \"\\\\n\\x1b[31m----> Commit FAILED <----\\\\x1b[0m\\\\n\"\n      fi\n    }\n    \n    function cm() {\n      # First, check if inside a Git repository\n      if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then\n        echo -e \"\\\\n\\x1b[31mError: Not inside a Git repository.\\\\x1b[0m\\\\n\"\n        return\n      fi\n    \n      # Check if a commit message was provided\n      if [ \"$#\" -eq 0 ]; then\n        echo -e \"\\\\n\\x1b[31mError: No commit message provided.\\\\x1b[0m\\\\n\"\n        return 1\n      fi\n    \n      local commit_message=\"$*\"\n    \n      # Check if the HEAD is detached or the branch is valid\n      local current_branch=$(git symbolic-ref --quiet --short HEAD)\n      if [ -z \"$current_branch\" ]; then\n        echo -e \"\\\\n\\x1b[31mError: Repository is in a detached head state or the branch is not valid.\\\\x1b[0m\"\n        echo \"Please check out a branch to make your changes permanent.\\\\n\"\n        return\n      fi\n    \n      # Commit changes\n      echo -e \"Committing with message: $commit_message\"\n      git commit -m \"$commit_message\"\n      if [[ $? -eq 0 ]]; then\n        echo -e \"\\\\n\\x1b[36mCommit Message:\\\\x1b[0m $commit_message\\\\n\"\n        echo -e \"\\\\x1b[32m----> Commit Successful <----\\\\x1b[0m\\\\n\"\n      else\n        echo -e \"\\\\n\\x1b[31m----> Commit FAILED <----\\\\x1b[0m\\\\n\"\n      fi\n    }\n    # END: ACP Function \n    `\n}\n\nfunction deactivate() {\n  const shellConfigFilePath = getShellConfigFilePath()\n  if (shellConfigFilePath && fs.existsSync(shellConfigFilePath)) {\n    removeAcpCommand(shellConfigFilePath)\n  }\n}\n\nfunction removeAcpCommand(shellConfigFilePath) {\n  try {\n    let content = fs.readFileSync(shellConfigFilePath, \"utf8\")\n    const startMarker = \"# BEGIN: ACP Function\"\n    const endMarker = \"# END: ACP Function\"\n    const startIndex = content.indexOf(startMarker)\n    const endIndex = content.indexOf(endMarker, startIndex) + endMarker.length\n\n    if (startIndex !== -1 && endIndex !== -1) {\n      // Remove the ACP function block\n      content = content.substring(0, startIndex) + content.substring(endIndex)\n      // Remove any extra newlines that may create gaps in the config file\n      content = content.replace(/\\n{2,}/g, \"\\n\")\n      fs.writeFileSync(shellConfigFilePath, content)\n      console.log(\"ACP function removed from the shell config file.\")\n    }\n  } catch (error) {\n    console.error(\"Failed to remove ACP function:\", error)\n  }\n}\n\nmodule.exports = {\n  activate,\n  deactivate,\n}\n\n// two version of extension\n// quickly : acp-git-commands\n// enhanced : git-acp-enhanced\n// {\n//   \"name\": \"acp-git-commands\",\n//   \"displayName\": \"Git ACP Quickly Add, Commit & Push\",\n//   \"publisher\": \"AhmadNYC\",\n//\n// Git ACP Enhanced: Add, Commit, Push   // second display name\n","module.exports = require(\"vscode\");","module.exports = require(\"child_process\");","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(286);\n"],"names":["vscode","require","os","fs","path","VERSION","openTerminalAndRunAcp","console","log","currentTerminal","window","activeTerminal","workspaceName","workspace","name","createTerminal","show","setTimeout","sendText","updateGitStatus","gitStatusIndicator","_vscode$workspace$wor","repoPath","rootPath","workspaceFolders","uri","fsPath","existsSync","join","text","cwd","err","stdout","error","status","trim","includes","color","tooltip","parseGitStatus","getShellConfigFilePath","configFile","shell","process","env","SHELL","shellName","basename","concat","configPath","homedir","writeFileSync","getNewAcpFunction","showInformationMessage","autoUpdateAcpCommand","shellConfigFilePath","forceUpdate","content","readFileSync","existingVersionMatch","match","existingVersion","newAcpFunction","endMarker","startIndex","indexOf","endIndex","substring","terminalName","dispose","showErrorMessage","message","updateAcpCommand","version","module","exports","activate","context","createStatusBarItem","StatusBarAlignment","Left","subscriptions","push","acpCommandDisposable","commands","registerCommand","gitWatcher","createFileSystemWatcher","onDidChange","intervalId","setInterval","disposable","clearInterval","setupFetchInterval","onDidChangeActiveTextEditor","onDidChangeWindowState","state","focused","acpFunctionCode","instructions","openTextDocument","language","then","document","showTextDocument","preview","showWarningMessage","deactivate","replace","removeAcpCommand","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}