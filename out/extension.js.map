{"version":3,"file":"extension.js","mappings":"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","sources":[".././extension.js","../external commonjs \"vscode\"","../external node-commonjs \"fs\"","../external node-commonjs \"os\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["const vscode = require(\"vscode\")\nconst os = require(\"os\")\nconst fs = require(\"fs\")\nconst path = require(\"path\")\n\nfunction activate(context) {\n  console.log(\n    'Congratulations, your extension \"ACP-GIT-COMMAND\" is now ACTIVE!'\n  )\n\n  const shellConfigFilePath = getShellConfigFilePath()\n  if (shellConfigFilePath) {\n    const wasUpdated = autoUpdateAcpCommand(shellConfigFilePath)\n    if (wasUpdated) {\n      vscode.window.showInformationMessage(\n        \"ACP command was successfully updated.\"\n      )\n    }\n  } else {\n    createInstructionFile()\n    vscode.window.showWarningMessage(\n      \"No shell configuration file found. Instructions file created on desktop.\"\n    )\n  }\n\n  let disposable = vscode.commands.registerCommand(\n    \"acp-git-commands.installACPCommand\",\n    function () {\n      const shellConfigFilePath = getShellConfigFilePath()\n      if (shellConfigFilePath) {\n        const wasUpdated = autoUpdateAcpCommand(shellConfigFilePath)\n        if (wasUpdated) {\n          vscode.window.showInformationMessage(\n            \"ACP command was successfully updated.\"\n          )\n        }\n      } else {\n        vscode.window.showWarningMessage(\n          \"No shell configuration file found. Please check the instructions on your desktop.\"\n        )\n      }\n    }\n  )\n\n  context.subscriptions.push(disposable)\n}\n\nfunction getShellConfigFilePath() {\n  // const shellConfigFiles = {\n  //   darwin: [\".zshrc\", \".zsh\", \"zshrc\"], // Look for .zshrc or a file simply named zsh\n  //   linux: [\".bashrc\", \".zshrc\", \".zsh\", \"zshrc\"], // Include zsh in Linux\n  //   win32: [\".bash_profile\", \".zshrc\", \".zsh\", \"zshrc\"], // Include zsh in Windows if applicable\n  // }\n  const shellConfigFiles = {\n    darwin: [\n      \".zshrc\",\n      \".zprofile\",\n      \".zshenv\",\n      \".zlogin\",\n      // \"zsh\", // might be fake not sure\n      \".zlogout\",\n      \"zshenv\",\n      \"zprofile\",\n      \"zlogin\",\n      \"zlogout\",\n      // \"zshrc\", // Doesn't work if found , also could be fake\n    ],\n    linux: [\n      \".bashrc\",\n      \".zshrc\",\n      \".zprofile\",\n      \".zshenv\",\n      \".zlogin\",\n      \".zlogout\",\n      // \"zsh\",\n      \"zshenv\",\n      \"zprofile\",\n      \"zlogin\",\n      \"zlogout\",\n      // \"zshrc\", // Doesn't work if found\n    ],\n    win32: [\n      \".zshrc\",\n      \".zprofile\",\n      \".bash_profile\",\n      \".zshenv\",\n      \".zlogin\",\n      \".zlogout\",\n      // \"zsh\",\n      \"zshenv\",\n      \"zprofile\",\n      \"zlogin\",\n      \"zlogout\",\n      // \"zshrc\", // Doesn't work if found\n    ],\n  }\n\n  const possibleFiles = shellConfigFiles[os.platform()]\n  for (const file of possibleFiles) {\n    const configPath = path.join(os.homedir(), file)\n    if (fs.existsSync(configPath)) {\n      console.log(configPath, \"FOUND SHELL CONFIG FILE\")\n      return configPath\n    }\n  }\n\n  console.log(\"No shell config file found for automatic updates.\")\n  return null\n}\n\nfunction autoUpdateAcpCommand(shellConfigFilePath) {\n  if (shellConfigFilePath && fs.existsSync(shellConfigFilePath)) {\n    return updateAcpCommand(shellConfigFilePath, false)\n  } else {\n    console.log(\n      \"Unable to find shell config file for updating: \",\n      shellConfigFilePath\n    )\n    return false\n  }\n}\n\nfunction createInstructionFile() {\n  const acpFunctionCode = getNewAcpFunction(\"0.7.5\") // Fetch the current ACP function string\n  const instructions = `\n\n  !!!CONTACT ME FIRST BEFORE DOING THIS IF YOU CAN AND RUN echo $SHELL.\n  Send Results to me\n\n  # Manual Installation of ACP Command\n  No shell configuration file was found or it's not accessible.\n  Please manually add the following script to your shell configuration file (e.g., .bashrc, .bash_profile, .zshrc):\n\n  ${acpFunctionCode}\n\n  Save the file and source it to apply the changes, e.g., \\`source ~/.bashrc\\`\n  `\n\n  vscode.workspace\n    .openTextDocument({ content: instructions, language: \"markdown\" })\n    .then((document) => {\n      vscode.window.showTextDocument(document, { preview: false })\n    })\n  console.log(\"Instructions opened in a new VS Code editor tab.\")\n}\n\nfunction updateAcpCommand(shellConfigFilePath, forceUpdate) {\n  const currentVersion = \"0.7.5\"\n  const newAcpFunction = getNewAcpFunction(currentVersion)\n\n  try {\n    let content = fs.readFileSync(shellConfigFilePath, \"utf8\")\n    const versionRegex = /# ACP Version: (\\d+\\.\\d+\\.\\d+)/\n    const existingVersionMatch = content.match(versionRegex)\n    const existingVersion = existingVersionMatch\n      ? existingVersionMatch[1]\n      : \"none\"\n\n    console.log(\n      \"Existing version: \",\n      existingVersion,\n      \", Current version: \",\n      currentVersion\n    )\n    if (existingVersion !== currentVersion || forceUpdate) {\n      const startMarker = \"# BEGIN: ACP Function\"\n      const endMarker = \"# END: ACP Function\"\n      let startIndex = content.indexOf(startMarker)\n      let endIndex = content.indexOf(endMarker, startIndex + startMarker.length)\n\n      if (startIndex !== -1 && endIndex !== -1) {\n        endIndex += endMarker.length\n        let beforeFunction = content.substring(0, startIndex)\n        let afterFunction = content.substring(endIndex)\n        content = beforeFunction + newAcpFunction + afterFunction\n        fs.writeFileSync(shellConfigFilePath, content)\n      } else {\n        content += `\\n${newAcpFunction}`\n        fs.writeFileSync(shellConfigFilePath, content)\n      }\n      vscode.window.showInformationMessage(\n        `ACP CMD UPDATED: ${currentVersion} in ${shellConfigFilePath}`\n      )\n    }\n  } catch (error) {\n    vscode.window.showErrorMessage(\n      `ERROR OCCURRED DURING UPDATE ACP: ${error.message}`\n    )\n  }\n}\n\n// Get the new ACP function for the shell configuration\n\nfunction getNewAcpFunction(version) {\n  return `\n# BEGIN: ACP Function - Git Add, Commit, Push - ACP Version: ${version} - DO NOT MODIFY THIS BLOCK MANUALLY # \n# ACP Version: ${version}\nfunction acp() {\n  echo -e \"Checking repository status...\"\n\n  # Check if inside a git repository\n  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then\n    echo -e \"\\\\n\\\\x1b[31mError: Not inside a Git repository.\\\\x1b[0m\\\\n\"\n    echo \"Please navigate to a directory that is part of a Git repository or initialize one with \\\\x1b[33m'git init'\\\\x1b[0m.\\\\n\"\n    return\n  fi\n\n  # Check if in a detached head state\n  if ! git symbolic-ref --quiet --short HEAD; then\n    echo -e \"\\\\n\\\\x1b[31mError: Repository is in a detached head state.\\\\x1b[0m\"\n    echo \"Please check out a branch to make your changes permanent.\"\n    return\n  fi\n  \n  # Fetch the latest changes from the remote\n\n  git fetch origin\n  local current_branch=$(git rev-parse --abbrev-ref HEAD)\n  \n  # Check if the current branch has an upstream set\n\n  if ! git rev-parse --abbrev-ref --symbolic-full-name @{u} >/dev/null 2>&1; then\n  echo -e \"\\n\\x1b[31mError: No upstream set for the current branch '$current_branch'.\\x1b[0m\"\n  echo -e \"\\\\nTo push and set the remote as upstream, use:\"\n  echo -e \"\\\\n\\\\x1b[33m'git push --set-upstream origin $current_branch'\\\\x1b[0m\\\\n\"\n    return\n  fi\n\n  # Check if the local branch is behind, ahead, or diverged from the remote branch\n\n  local local_commit=$(git rev-parse @)\n  local remote_commit=$(git rev-parse @{u})\n  local base_commit=$(git merge-base @ @{u})\n\n  if [ \"$local_commit\" = \"$remote_commit\" ]; then\n    echo \"Up-to-date with remote. No pull needed.\"\n  elif [ \"$local_commit\" = \"$base_commit\" ]; then\n    echo -e \"\\\\n\\\\x1b[31mYour local branch is behind the remote branch.\\\\x1b[0m\\\\n\"\n    echo -e \"Pull required before push. Please run: \\\\x1b[33m'git pull'\\\\x1b[0m.\\\\n\"\n    return\n  elif [ \"$remote_commit\" = \"$base_commit\" ]; then\n    echo \"Local commits can be pushed.\"\n  else\n    echo -e \"\\\\n\\\\x1b[33mDiverged from remote. Manual merge required & manual Git commands.\\\\x1b[0m\\\\n\"\n    echo -e \"Please run: \\\\x1b[33m'git pull'\\\\x1b[0m & \\\\x1b[33m'git status'\\\\x1b[0m to see conflicts and resolve them manually.\\\\n\"\n    return\n  fi\n\n  # Add all changes, commit, and push to the remote\n\n  echo -e \"Adding \\\\x1b[36mall\\\\x1b[0m changes...\"\n  git add -A\n\n  if [ $# -eq 0 ]; then\n    echo -e \"\\\\n\\\\x1b[31mError: No commit message provided.\\\\x1b[0m\\\\n\"\n    return 1\n  fi\n\n  commit_message=\"$*\"\n  echo -e \"Committing \\\\x1b[36mwith\\\\x1b[0m message: '$commit_message'\"\n  git commit -m \"$commit_message\"\n  if [[ $? -eq 0 ]]; then\n    echo \"Successfully committed. Pushing \\\\x1b[36mto\\\\x1b[0m remote...\"\n    git push\n    if [[ $? -eq 0 ]]; then\n      echo -e \"\\\\n\\\\x1b[36mCommit Message:\\\\x1b[0m $commit_message\\\\n\"\n      echo -e \"\\\\x1b[32m----> Push Successful <----\\\\x1b[0m\\\\n\"\n    else\n      echo -e \"\\\\n\\\\x1b[31m----> Push FAILED <----\\\\x1b[0m\\\\n\"\n    fi\n  else\n    echo -e \"\\\\n\\\\x1b[31m----> Commit FAILED <----\\\\x1b[0m\\\\n\"\n  fi\n}\n\nfunction acm() {\n  # Check if inside a Git repository\n  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then\n    echo -e \"\\\\n\\x1b[31mError: Not inside a Git repository.\\\\x1b[0m\\\\n\"\n    return\n  fi\n\n  echo -e \"Preparing \\\\x1b[36mto\\\\x1b[0m add \\\\x1b[36mall\\\\x1b[0m changes and commit...\"\n\n  # First, check if a commit message was provided\n  if [ \"$#\" -eq 0 ]; then\n    echo -e \"\\\\n\\x1b[31mError: No commit message provided.\\\\x1b[0m\\\\n\"\n    return 1\n  fi\n\n  local commit_message=\"$*\"\n\n\n  # Check if the HEAD is detached or the branch is valid\n  local current_branch=$(git symbolic-ref --quiet --short HEAD)\n  if [ -z \"$current_branch\" ]; then\n    echo -e \"\\\\n\\x1b[31mError: Repository is in a detached head state or the branch is not valid.\\\\x1b[0m\"\n    echo \"Please check out a branch to make your changes permanent.\\\\n\"\n    return\n  fi\n\n  # Add all changes\n  git add -A\n  echo -e \"\\\\x1b[36mAll\\\\x1b[0m changes added.\"\n\n  # Commit changes\n  echo -e \"Committing with message: $commit_message\"\n  git commit -m \"$commit_message\"\n  if [[ $? -eq 0 ]]; then\n    echo -e \"\\\\n\\\\x1b[36mCommit Message:\\\\x1b[0m $commit_message\\\\n\"\n    echo -e \"\\\\x1b[32m----> Commit Successful <----\\\\x1b[0m\\\\n\"\n  else\n    echo -e \"\\\\n\\x1b[31m----> Commit FAILED <----\\\\x1b[0m\\\\n\"\n  fi\n}\n\nfunction add() {\n\n  # First, check if inside a Git repository\n  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then\n  echo -e \"\\\\n\\x1b[31mError: Not inside a Git repository.\\\\x1b[0m\\\\n\"\n  return\n  fi\n\n  echo -e \"\\\\nPreparing \\\\x1b[36mto\\\\x1b[0m add changes.\"\n\n  # Check if the HEAD is detached or the branch is valid\n  local current_branch=$(git symbolic-ref --quiet --short HEAD)\n  if [ -z \"$current_branch\" ]; then\n      echo -e \"\\\\n\\x1b[31mError: Repository is in a detached head state or the branch is not valid.\\\\x1b[0m\"\n      echo \"Please check out a branch to make your changes permanent.\\\\n\"\n      return\n  fi\n\n  # Determine what to add based on the argument provided\n  if [ \"$#\" -eq 0 ]; then\n      echo \"No specific files provided. Adding \\\\x1b[36mall\\\\x1b[0m changes...\\\\n\"\n      git add -A\n  else\n      echo \"Adding specified files...\\\\n\"\n      git add \"$@\"\n  fi\n\n  # Confirm what has been staged\n  git status --short\n  echo -e \"\\\\n\\x1b[32mFiles have been staged. Use \\\\x1b[33m'cm <message>'\\\\x1b[0m to commit these changes.\\\\x1b[0m\\\\n\"\n  echo -e \"\\\\n\\x1b[32mGreen = Ready for commit\\\\x1b[0m, \\\\x1b[31mRed = Not staged for commit\\\\x1b[0m\\\\n\"\n}\n\nfunction cm () {\n  # First, check if inside a Git repository\n  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then\n  echo -e \"\\\\n\\x1b[31mError: Not inside a Git repository.\\\\x1b[0m\\\\n\"\n  return\n  fi\n\n  # Check if a commit message was provided\n  if [ \"$#\" -eq 0 ]; then\n  echo -e \"\\\\n\\x1b[31mError: No commit message provided.\\\\x1b[0m\\\\n\"\n  return\n  fi\n\n  local commit_message=\"$*\"\n\n  # Check if the HEAD is detached or the branch is valid\n  local current_branch=$(git symbolic-ref --quiet --short HEAD)\n  if [ -z \"$current_branch\" ]; then\n  echo -e \"\\\\n\\x1b[31mError: Repository is in a detached head state or the branch is not valid.\\\\x1b[0m\"\n  echo \"Please check out a branch to make your changes permanent.\\\\n\"\n  return\n  fi\n\n  # Commit changes\n  echo -e \"Committing with message: $commit_message\"\n  git commit -m \"$commit_message\"\n  if [[ $? -eq 0 ]]; then\n  echo -e \"\\\\n\\x1b[36mCommit Message:\\\\x1b[0m $commit_message\\\\n\"\n  echo -e \"\\\\x1b[32m----> Commit Successful <----\\\\x1b[0m\\\\n\"\n  else\n  echo -e \"\\\\n\\x1b[31m----> Commit FAILED <----\\\\x1b[0m\\\\n\"\n  fi\n}\n\nfunction cm() {\n  # First, check if inside a Git repository\n  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then\n    echo -e \"\\\\n\\x1b[31mError: Not inside a Git repository.\\\\x1b[0m\\\\n\"\n    return\n  fi\n\n  # Check if a commit message was provided\n  if [ \"$#\" -eq 0 ]; then\n    echo -e \"\\\\n\\x1b[31mError: No commit message provided.\\\\x1b[0m\\\\n\"\n    return 1\n  fi\n\n  local commit_message=\"$*\"\n\n  # Check if the HEAD is detached or the branch is valid\n  local current_branch=$(git symbolic-ref --quiet --short HEAD)\n  if [ -z \"$current_branch\" ]; then\n    echo -e \"\\\\n\\x1b[31mError: Repository is in a detached head state or the branch is not valid.\\\\x1b[0m\"\n    echo \"Please check out a branch to make your changes permanent.\\\\n\"\n    return\n  fi\n\n  # Commit changes\n  echo -e \"Committing with message: $commit_message\"\n  git commit -m \"$commit_message\"\n  if [[ $? -eq 0 ]]; then\n    echo -e \"\\\\n\\x1b[36mCommit Message:\\\\x1b[0m $commit_message\\\\n\"\n    echo -e \"\\\\x1b[32m----> Commit Successful <----\\\\x1b[0m\\\\n\"\n  else\n    echo -e \"\\\\n\\x1b[31m----> Commit FAILED <----\\\\x1b[0m\\\\n\"\n  fi\n}\n# END: ACP Function \n`\n}\n\n// # Usage\n// # Add                  # Will add all changes\n// # Add file1.txt file2.txt # Will add only file1.txt and file2.txt\n\nfunction deactivate() {}\n\nmodule.exports = {\n  activate,\n  deactivate,\n}\n\n// two version of extension\n// quickly : acp-git-commands\n// enhanced : git-acp-enhanced\n// {\n//   \"name\": \"acp-git-commands\",\n//   \"displayName\": \"Git ACP Quickly Add, Commit & Push\",\n//   \"publisher\": \"AhmadNYC\",\n\n// Git ACP Enhanced: Add, Commit, Push   // second display name\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(286);\n"],"names":["vscode","require","os","fs","path","getShellConfigFilePath","_step","_iterator","_createForOfIteratorHelper","darwin","linux","win32","platform","s","n","done","file","value","configPath","join","homedir","existsSync","console","log","err","e","f","autoUpdateAcpCommand","shellConfigFilePath","forceUpdate","currentVersion","newAcpFunction","getNewAcpFunction","content","readFileSync","existingVersionMatch","match","existingVersion","startMarker","endMarker","startIndex","indexOf","endIndex","beforeFunction","substring","afterFunction","writeFileSync","concat","window","showInformationMessage","error","showErrorMessage","message","updateAcpCommand","version","module","exports","activate","context","acpFunctionCode","instructions","workspace","openTextDocument","language","then","document","showTextDocument","preview","showWarningMessage","disposable","commands","registerCommand","subscriptions","push","deactivate","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}